{"version":3,"sources":["../source/main.js"],"names":["program","commander","Command","start","cmdObj","servicePath","registrationPath","console","log","entryPoint","EntryPoint","process","on","stop","exit","stdin","resume","main","version","usage","error","args","join","command","option","action","parse","argv","slice","length","help"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,OAAO,GAAG,IAAIC,sBAAUC,OAAd,EAAhB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,MAAM,EAAI;AAAA,MACdC,WADc,GACoBD,MADpB,CACdC,WADc;AAAA,MACDC,gBADC,GACoBF,MADpB,CACDE,gBADC;AAEtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,WAA5B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,gBAAjC;AACA,MAAMG,UAAU,GAAG,IAAIC,sBAAJ,CAAe;AAChCL,IAAAA,WAAW,EAAXA,WADgC;AAEhCC,IAAAA,gBAAgB,EAAhBA;AAFgC,GAAf,CAAnB;AAIAG,EAAAA,UAAU,CAACN,KAAX;AACAQ,EAAAA,OAAO,CAACC,EAAR,CAAW,QAAX,EAAqB,YAAM;AACzBL,IAAAA,OAAO,CAACC,GAAR,oBAAwBH,WAAxB;AACAI,IAAAA,UAAU,CAACI,IAAX;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAG,IAAAA,OAAO,CAACG,IAAR,CAAa,CAAb;AACD,GALD;AAMAH,EAAAA,OAAO,CAACI,KAAR,CAAcC,MAAd;AACD,CAhBD;;AAkBA,IAAMC,IAAI;AAAA,+BAAG,aAAY;AACvBjB,IAAAA,OAAO,CACJkB,OADH,CACW,OADX,EAEGC,KAFH,CAES,mBAFT,EAGGP,EAHH,CAGM,WAHN,EAGmB,YAAM;AACrBL,MAAAA,OAAO,CAACa,KAAR,CAAc,mEAAd,EAAmFpB,OAAO,CAACqB,IAAR,CAAaC,IAAb,CAAkB,GAAlB,CAAnF;AACAX,MAAAA,OAAO,CAACG,IAAR,CAAa,CAAb;AACD,KANH;AAQAd,IAAAA,OAAO,CAACuB,OAAR,CAAgB,OAAhB,EACGC,MADH,CACU,0BADV,EACsC,0EADtC,EACkH,+BADlH,EAEGA,MAFH,CAEU,+BAFV,EAE2C,+EAF3C,EAE4H,mCAF5H,EAGGC,MAHH,CAGUtB,KAHV;AAKA,UAAMH,OAAO,CAAC0B,KAAR,CAAcf,OAAO,CAACgB,IAAtB,CAAN;;AAEA,QAAI,CAAChB,OAAO,CAACgB,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsBC,MAA3B,EAAmC;AACjC7B,MAAAA,OAAO,CAAC8B,IAAR;AACD;AACF,GAnBS;;AAAA,kBAAJb,IAAI;AAAA;AAAA;AAAA,GAAV","sourcesContent":["import { EntryPoint } from './entry-point'\nimport commander from 'commander'\n\nconst program = new commander.Command()\n\nconst start = cmdObj => {\n  const { servicePath, registrationPath } = cmdObj\n  console.log('servicePath=', servicePath)\n  console.log('registrationPath=', registrationPath)\n  const entryPoint = new EntryPoint({\n    servicePath,\n    registrationPath\n  })\n  entryPoint.start()\n  process.on('SIGINT', () => {\n    console.log(`stopping ${servicePath}...`)\n    entryPoint.stop()\n    console.log('stopped. exiting now...')\n    process.exit(0)\n  })\n  process.stdin.resume()\n}\n\nconst main = async () => {\n  program\n    .version('0.1.0')\n    .usage('command [options]')\n    .on('command:*', () => {\n      console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '))\n      process.exit(1)\n    })\n\n  program.command('start')\n    .option('-p, --servicePath <path>', 'service path for the service in the format: service-namespace.service-id', 'identity-box.identity-service')\n    .option('-r, --registrationPath <path>', 'registration path for the service in the format: service-namespace.service-id', 'identity-box.service-registration')\n    .action(start)\n\n  await program.parse(process.argv)\n\n  if (!process.argv.slice(2).length) {\n    program.help()\n  }\n}\n\nexport { main }\n"],"file":"main.js"}