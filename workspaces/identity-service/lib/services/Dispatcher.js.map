{"version":3,"sources":["../../source/services/Dispatcher.js"],"names":["Dispatcher","process","env","IPFS_ADDR","message","console","log","method","identityProvider","createIdentity","getDIDDocument","storeJSON","getJSON","reset","backup","hasBackup","restore","deleteIdentity","migrate","params","IdentityProvider","ipfs"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;IAEMA,U,GAIJ,sBAAe;AAAA;;AAAA;;AAAA,gCAHR,gCAAWC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,yBAApC,CAGQ;;AAAA;;AAAA;AAAA,iCAIJ,WAAMC,OAAN,EAAiB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,OAAxB;;AACA,cAAQA,OAAO,CAACG,MAAhB;AACE,aAAK,iBAAL;AACE,iBAAO,KAAI,CAACC,gBAAL,CAAsBC,cAAtB,CAAqCL,OAArC,CAAP;;AACF,aAAK,kBAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBE,cAAtB,CAAqCN,OAArC,CAAP;;AACF,aAAK,YAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBG,SAAtB,CAAgCP,OAAhC,CAAP;;AACF,aAAK,UAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBI,OAAtB,CAA8BR,OAA9B,CAAP;;AACF,aAAK,OAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBK,KAAtB,CAA4BT,OAA5B,CAAP;;AACF,aAAK,QAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBM,MAAtB,CAA6BV,OAA7B,CAAP;;AACF,aAAK,YAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBO,SAAtB,EAAP;;AACF,aAAK,SAAL;AACE,iBAAO,KAAI,CAACP,gBAAL,CAAsBQ,OAAtB,CAA8BZ,OAA9B,CAAP;;AACF,aAAK,QAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBS,cAAtB,CAAqCb,OAArC,CAAP;;AACF,aAAK,SAAL;AACE,iBAAO,KAAI,CAACI,gBAAL,CAAsBU,OAAtB,CAA8Bd,OAA9B,CAAP;;AACF;AACE,iBAAO;AACLG,YAAAA,MAAM,EAAE,gBADH;AAELY,YAAAA,MAAM,EAAE;AAFH,WAAP;AAtBJ;AA2BD,KAnCc;;AAAA;AAAA;AAAA;AAAA;;AACb,OAAKX,gBAAL,GAAwB,IAAIY,kCAAJ,CAAqB,KAAKC,IAA1B,CAAxB;AACD,C","sourcesContent":["import ipfsClient from 'ipfs-http-client'\nimport { IdentityProvider } from './IdentityProvider'\n\nclass Dispatcher {\n  ipfs = ipfsClient(process.env.IPFS_ADDR || '/ip4/127.0.0.1/tcp/5001')\n  identityProvider\n\n  constructor () {\n    this.identityProvider = new IdentityProvider(this.ipfs)\n  }\n\n  dispatch = async message => {\n    console.log('**!!** DISPATCHER **!!**')\n    console.log('received:')\n    console.log('message:', message)\n    switch (message.method) {\n      case 'create-identity':\n        return this.identityProvider.createIdentity(message)\n      case 'get-did-document':\n        return this.identityProvider.getDIDDocument(message)\n      case 'store-json':\n        return this.identityProvider.storeJSON(message)\n      case 'get-json':\n        return this.identityProvider.getJSON(message)\n      case 'reset':\n        return this.identityProvider.reset(message)\n      case 'backup':\n        return this.identityProvider.backup(message)\n      case 'has-backup':\n        return this.identityProvider.hasBackup()\n      case 'restore':\n        return this.identityProvider.restore(message)\n      case 'delete':\n        return this.identityProvider.deleteIdentity(message)\n      case 'migrate':\n        return this.identityProvider.migrate(message)\n      default:\n        return {\n          method: 'unknown-method',\n          params: []\n        }\n    }\n  }\n}\n\nexport { Dispatcher }\n"],"file":"Dispatcher.js"}