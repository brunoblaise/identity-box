{"version":3,"sources":["../../source/services/IdentityProvider.js"],"names":["IdentityProvider","ipfs","process","env","IDBOX_BACKUP_PASSWORD","message","identity","createNew","params","didDoc","createDIDDocument","cid","writeToIPFS","pin","console","log","ipnsName","ipnsNameFromDID","did","IPNS","setIPNSRecord","method","getCIDForIPNSName","didDocument","readFromIPFS","json","identityNames","deleteAll","encryptedBackup","backupId","createBackupFolders","backupIds","allKeys","key","list","keys","filter","k","includes","name","Promise","all","map","id","backupName","backupDIDDocument","backupFiles","glob","sync","cwd","IDBOX_BACKUP","backupPresent","length","hasBackup","backupExists","restoreIds","restoreNames","restoreDIDDocuments","identityName","deleteIPNSRecord","rm","migration","migrationType","migrateKeyNames","migrationData","publicEncryptionKey","publicSigningKey","gen","type","size","timestamp","Date","toISOString","created","publicKey","controller","curve","publicKeyBase64","dag","put","format","hashAlg","toBaseEncodedString","hash","add","get","value","match","path","join","IPFS_PATH","buf","fs","readFileSync","getKeyPath","crypto","unmarshalPrivateKey","pem","password","marshalPrivateKey","writeFileSync","mode","exportPEM","getBackupPath","getDIDDocumentPath","JSON","stringify","backupPath","rmdirSync","recursive","mkdirSync","getBackupFolderPath","ipnsNames","parse","pems","pemFileName","replace","importPEM","existsSync","oldName","newName","rename"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport glob from 'glob'\nimport crypto from 'libp2p-crypto'\nimport { IPNS } from './ipns'\n\nclass IdentityProvider {\n  password = process.env.IDBOX_BACKUP_PASSWORD\n  ipfs\n  id\n\n  constructor (ipfs) {\n    this.ipfs = ipfs\n  }\n\n  createIdentity = async message => {\n    const identity = await this.createNew(message.params[0])\n\n    const didDoc = this.createDIDDocument({\n      ...identity,\n      ...message.params[0]\n    })\n    const cid = await this.writeToIPFS(didDoc)\n    await this.pin(cid)\n    console.log('cid:', cid)\n    const ipnsName = this.ipnsNameFromDID(identity.did)\n    console.log('ipns name:', ipnsName)\n    await IPNS.setIPNSRecord({\n      ipnsName,\n      cid\n    })\n    return {\n      method: 'create-identity-response',\n      params: [\n        { identity }\n      ]\n    }\n  }\n\n  getDIDDocument = async message => {\n    const { did } = message.params[0]\n    const ipnsName = this.ipnsNameFromDID(did)\n    const { cid } = await IPNS.getCIDForIPNSName({ ipnsName })\n    const didDocument = await this.readFromIPFS(cid)\n    return {\n      method: 'get-did-document-response',\n      params: [\n        didDocument\n      ]\n    }\n  }\n\n  storeJSON = async message => {\n    const json = message.params[0]\n    const cid = await this.writeToIPFS(json)\n    await this.pin(cid)\n    return {\n      method: 'store-json-response',\n      params: [\n        { cid }\n      ]\n    }\n  }\n\n  getJSON = async message => {\n    const { cid } = message.params[0]\n    const { json } = await this.readFromIPFS(cid)\n    return {\n      method: 'get-json-response',\n      params: [\n        { json }\n      ]\n    }\n  }\n\n  reset = async message => {\n    const { identityNames } = message.params[0]\n    await this.deleteAll(identityNames)\n    return {\n      method: 'reset-response'\n    }\n  }\n\n  backup = async message => {\n    const { encryptedBackup, backupId, identityNames } = message.params[0]\n    this.createBackupFolders(backupId)\n    this.backupIds(encryptedBackup, backupId)\n    const allKeys = await this.ipfs.key.list()\n    const keys = allKeys.filter(k => identityNames.includes(k.name))\n    await Promise.all(keys.map(async ({ name, id }) => {\n      if (name === 'self') return\n      console.log('backing up key: ', name)\n      await this.backupName(name, backupId)\n      await this.backupDIDDocument(id, backupId)\n    }))\n    return {\n      method: 'backup-response'\n    }\n  }\n\n  hasBackup = () => {\n    const backupFiles = glob.sync('*', {\n      cwd: process.env.IDBOX_BACKUP\n    })\n    const backupPresent = (backupFiles.length > 0)\n    return {\n      method: 'has-backup-response',\n      params: [\n        { hasBackup: backupPresent }\n      ]\n    }\n  }\n\n  restore = async message => {\n    const { backupId } = message.params[0]\n    let encryptedBackup\n    if (this.backupExists(backupId)) {\n      encryptedBackup = this.restoreIds(backupId)\n      await this.restoreNames(backupId)\n      await this.restoreDIDDocuments(backupId)\n    } else {\n      encryptedBackup = 'not found'\n    }\n    return {\n      method: 'restore-response',\n      params: [\n        { encryptedBackup }\n      ]\n    }\n  }\n\n  deleteIdentity = async message => {\n    const { identityName: name } = message.params[0]\n    const allKeys = await this.ipfs.key.list()\n    const keys = allKeys.filter(k => k.name === name)\n    if (keys.length === 1) {\n      const { id: ipnsName } = keys[0]\n      console.log(`deleting key ${name} with IPNS name ${ipnsName}`)\n      await IPNS.deleteIPNSRecord({ ipnsName })\n      await this.ipfs.key.rm(name)\n    }\n    return {\n      method: 'delete-response'\n    }\n  }\n\n  migrate = async message => {\n    const { migration } = message.params[0]\n    switch (migration.migrationType) {\n      case 'KEY-NAMING':\n        await this.migrateKeyNames(migration.migrationData)\n        break\n      default:\n        console.log('unknown migration - ignoring!')\n    }\n    return {\n      method: 'migrate-response'\n    }\n  }\n\n  createNew = async ({\n    name,\n    publicEncryptionKey,\n    publicSigningKey\n  }) => {\n    console.log('-------------------------------------------')\n    console.log('creating identity:')\n    console.log('name:', name)\n    console.log('publicEncryptionKey:', publicEncryptionKey)\n    console.log('publicSigningKey:', publicSigningKey)\n    console.log('-------------------------------------------')\n    this.id = await this.ipfs.key.gen(name, {\n      type: 'rsa',\n      size: 2048\n    })\n    return {\n      did: `did:ipid:${this.id.id}`,\n      name: this.id.name\n    }\n  }\n\n  createDIDDocument = ({\n    did,\n    publicEncryptionKey,\n    publicSigningKey\n  }) => {\n    const timestamp = (new Date()).toISOString()\n    return {\n      '@context': {\n        '/': 'zdpuAmoZixxJjvosviGeYcqduzDhSwGV2bL6ZTTXo1hbEJHfq'\n      },\n      created: timestamp,\n      id: did,\n      publicKey: [\n        {\n          id: `${did}#signing-key-1`,\n          type: 'EdDsaPublicKey',\n          controller: did,\n          curve: 'ed25519',\n          publicKeyBase64: publicSigningKey\n        },\n        {\n          id: `${did}#encryption-key-1`,\n          type: 'ECDHPublicKey',\n          controller: did,\n          curve: 'Curve25519',\n          publicKeyBase64: publicEncryptionKey\n        }\n      ]\n    }\n  }\n\n  writeToIPFS = async json => {\n    const cid = await this.ipfs.dag.put(\n      json,\n      { format: 'dag-cbor', hashAlg: 'sha2-256' }\n    )\n    return cid.toBaseEncodedString()\n  }\n\n  pin = async hash => {\n    await this.ipfs.pin.add(hash)\n  }\n\n  readFromIPFS = async cid => {\n    const { value } = await this.ipfs.dag.get(cid)\n    return value\n  }\n\n  ipnsNameFromDID = did => {\n    const match = did.match(/did:ipid:(.*)$/)\n    return match && match[1]\n  }\n\n  deleteAll = async identityNames => {\n    const allKeys = await this.ipfs.key.list()\n    const keys = allKeys.filter(k => identityNames.includes(k.name))\n    await Promise.all(keys.map(async ({ name }) => {\n      if (name === 'self') return\n      console.log('deleting key: ', name)\n      await this.ipfs.key.rm(name)\n    }))\n    // Currently we just unpublish the names but in the future we may decide\n    // to have an apart user action to remove \"old\" identities.\n    // When we deleteIPNS record, the corresponding identity will\n    // not be \"resolvable\" anymore. This may not alwys be intented as\n    // sometimes you may just reset your box, but you do not want\n    // your identities to become \"unavailbale\" in the meantime.\n    await Promise.all(keys.map(async ({ id: ipnsName, name }) => {\n      if (name === 'self') return\n      console.log('deleting IPNS name: ', ipnsName)\n      await IPNS.deleteIPNSRecord({ ipnsName })\n    }))\n  }\n\n  getKeyPath = name => {\n    return path.join(process.env.IPFS_PATH, 'keystore', name)\n  }\n\n  getBackupPath = (name, backupId) => {\n    return path.join(process.env.IDBOX_BACKUP, backupId, `${name}.pem`)\n  }\n\n  getBackupFolderPath = backupId => {\n    return path.join(process.env.IDBOX_BACKUP, backupId, 'did-docs')\n  }\n\n  getDIDDocumentPath = (backupId, ipnsName) => {\n    return path.join(process.env.IDBOX_BACKUP, backupId, 'did-docs', ipnsName)\n  }\n\n  exportPEM = async name => {\n    const buf = fs.readFileSync(this.getKeyPath(name))\n    const key = await crypto.keys.unmarshalPrivateKey(buf)\n    const pem = await key.export(this.password)\n    return pem\n  }\n\n  importPEM = async (name, pem) => {\n    const key = await crypto.keys.import(pem, this.password)\n    const buf = await crypto.keys.marshalPrivateKey(key)\n\n    fs.writeFileSync(this.getKeyPath(name), buf, { mode: 0o644 })\n  }\n\n  backupName = async (name, backupId) => {\n    const pem = await this.exportPEM(name)\n    fs.writeFileSync(this.getBackupPath(name, backupId), pem, { mode: 0o644 })\n  }\n\n  backupDIDDocument = async (ipnsName, backupId) => {\n    const { cid } = await IPNS.getCIDForIPNSName({ ipnsName })\n    const didDocument = await this.readFromIPFS(cid)\n    fs.writeFileSync(this.getDIDDocumentPath(backupId, ipnsName), JSON.stringify(didDocument), { mode: 0o644 })\n  }\n\n  backupIds = (encryptedBackup, backupId) => {\n    const backupPath = path.join(process.env.IDBOX_BACKUP, backupId, 'backup')\n    fs.writeFileSync(backupPath, encryptedBackup, { mode: 0o644 })\n  }\n\n  createBackupFolders = backupId => {\n    fs.rmdirSync(path.join(process.env.IDBOX_BACKUP, backupId), { recursive: true })\n    fs.mkdirSync(this.getBackupFolderPath(backupId), { recursive: true, mode: 0o755 })\n  }\n\n  restoreIds = backupId => {\n    const backupPath = path.join(process.env.IDBOX_BACKUP, backupId, 'backup')\n    return fs.readFileSync(backupPath, 'utf8')\n  }\n\n  restoreDIDDocuments = async backupId => {\n    const ipnsNames = glob.sync('*', {\n      cwd: this.getBackupFolderPath(backupId)\n    })\n    await Promise.all(ipnsNames.map(async ipnsName => {\n      const didDoc = JSON.parse(fs.readFileSync(this.getDIDDocumentPath(backupId, ipnsName), 'utf8'))\n      const cid = await this.writeToIPFS(didDoc)\n      console.log(`restoring DIDDocument with IPNS name ${ipnsName} and CID ${cid}`)\n      await this.pin(cid)\n      await IPNS.setIPNSRecord({\n        ipnsName,\n        cid\n      })\n    }))\n  }\n\n  restoreNames = async backupId => {\n    const pems = glob.sync('*.pem', {\n      cwd: path.join(process.env.IDBOX_BACKUP, backupId)\n    })\n    await Promise.all(pems.map(async pemFileName => {\n      const name = pemFileName.replace(/\\.pem$/, '')\n      const pem = fs.readFileSync(this.getBackupPath(name, backupId), 'utf8')\n      await this.importPEM(name, pem)\n    }))\n  }\n\n  backupExists = backupId => {\n    return fs.existsSync(path.join(process.env.IDBOX_BACKUP, backupId))\n  }\n\n  migrateKeyNames = async migrationData => {\n    console.log('migrationData=', migrationData)\n    await Promise.all(migrationData.map(async ({ oldName, newName }) => {\n      await this.ipfs.key.rename(oldName, newName)\n    }))\n  }\n}\n\nexport { IdentityProvider }\n"],"file":"IdentityProvider.js"}