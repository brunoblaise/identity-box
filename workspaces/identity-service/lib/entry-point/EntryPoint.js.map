{"version":3,"sources":["../../source/entry-point/EntryPoint.js"],"names":["EntryPoint","servicePath","registrationPath","response","method","params","length","registrationRequest","serviceProxy","ServiceProxy","send","dispatcher","Dispatcher","identityService","IdentityService","create","IPNS","connect","register","validateRegistrationResponse","console","log","JSON","stringify","stop"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;IAEMA,U,GAIJ,0BAAgD;AAAA;;AAAA,MAAjCC,WAAiC,QAAjCA,WAAiC;AAAA,MAApBC,gBAAoB,QAApBA,gBAAoB;;AAAA;;AAAA;;AAAA;;AAAA,wDAKjB,UAAAC,QAAQ,EAAI;AACzC,WACEA,QAAQ,CAACC,MAAT,KAAoB,mBAApB,IACAD,QAAQ,CAACE,MAAT,CAAgBC,MAAhB,KAA2B,CAD3B,IAEAH,QAAQ,CAACE,MAAT,CAAgB,CAAhB,EAAmBJ,WAAnB,KAAmC,KAAI,CAACA,WAH1C;AAKD,GAX+C;;AAAA,oCAarC,YAAM;AACf,QAAMM,mBAAmB,GAAG;AAC1BH,MAAAA,MAAM,EAAE,UADkB;AAE1BC,MAAAA,MAAM,EAAE,CACN;AAAEJ,QAAAA,WAAW,EAAE,KAAI,CAACA;AAApB,OADM;AAFkB,KAA5B;AAMA,QAAMO,YAAY,GAAG,IAAIC,mBAAJ,CAAiB,KAAI,CAACP,gBAAtB,CAArB;AACA,WAAOM,YAAY,CAACE,IAAb,CAAkBH,mBAAlB,CAAP;AACD,GAtB+C;;AAAA,gEAwBxC,aAAY;AAClB,QAAMI,UAAU,GAAG,IAAIC,oBAAJ,EAAnB;AACA,IAAA,KAAI,CAACC,eAAL,SAA6BC,0BAAgBC,MAAhB,CAAuB;AAClDd,MAAAA,WAAW,EAAE,KAAI,CAACA,WADgC;AAElDU,MAAAA,UAAU,EAAVA;AAFkD,KAAvB,CAA7B;;AAIAK,mBAAKC,OAAL;;AACA,QAAI,KAAI,CAACf,gBAAT,EAA2B;AAAA,wBACE,KAAI,CAACgB,QAAL,EADF;AAAA,UACjBf,QADiB,SACjBA,QADiB;;AAGzB,UAAI,KAAI,CAACgB,4BAAL,CAAkChB,QAAlC,CAAJ,EAAiD;AAC/CiB,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAepB,QAAf,CAAZ;AACD;AACF;AACF,GA1C+C;;AAAA,gCA4CzC,YAAM;AACX,IAAA,KAAI,CAACU,eAAL,IAAwB,KAAI,CAACA,eAAL,CAAqBW,IAArB,EAAxB;AACD,GA9C+C;;AAC9C,OAAKvB,WAAL,GAAmBA,WAAnB;AACA,OAAKC,gBAAL,GAAwBA,gBAAxB;AACD,C","sourcesContent":["import { IdentityService, Dispatcher, IPNS } from '../services'\nimport { ServiceProxy } from '@identity-box/utils'\n\nclass EntryPoint {\n  identityService\n  servicePath\n\n  constructor ({ servicePath, registrationPath }) {\n    this.servicePath = servicePath\n    this.registrationPath = registrationPath\n  }\n\n  validateRegistrationResponse = response => {\n    return (\n      response.method === 'register-response' &&\n      response.params.length === 1 &&\n      response.params[0].servicePath === this.servicePath\n    )\n  }\n\n  register = () => {\n    const registrationRequest = {\n      method: 'register',\n      params: [\n        { servicePath: this.servicePath }\n      ]\n    }\n    const serviceProxy = new ServiceProxy(this.registrationPath)\n    return serviceProxy.send(registrationRequest)\n  }\n\n  start = async () => {\n    const dispatcher = new Dispatcher()\n    this.identityService = await IdentityService.create({\n      servicePath: this.servicePath,\n      dispatcher\n    })\n    IPNS.connect()\n    if (this.registrationPath) {\n      const { response } = await this.register()\n\n      if (this.validateRegistrationResponse(response)) {\n        console.log('registration successful')\n      } else {\n        console.log('registration failed!')\n        console.log('received:')\n        console.log(JSON.stringify(response))\n      }\n    }\n  }\n\n  stop = () => {\n    this.identityService && this.identityService.stop()\n  }\n}\n\nexport { EntryPoint }\n"],"file":"EntryPoint.js"}